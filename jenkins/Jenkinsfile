pipeline{
    agent any
    environment{
        VERSION = "1.${BUILD_ID}"
       // rollback = 'false'
      //  TEST_DATABASE_URI = "sqlite:///data.db"
      //  TEST_SECRET_KEY = "test"
      //  CHROMEDRIVER_PATH = "/home/jenkins/chromedriver"
        //AUTHOR = credentials("AUTHOR")
      //  SECRET_KEY = credentials("SECRET_KEY")
    }
    stages{
        stage("Test Stage"){
            steps{
                sh "bash jenkins/shell-script/test.sh"
            }
        }
        stage("Build Images Stage"){
            steps{
                //sh "bash jenkins/shell-script/build_artifact.sh"
                script{
                 //   if(env.rollback == 'false'){
                   //     nginx_image = docker.build(nginx:latest)
                        dnd_app_core_img = docker.build("maxpaqzrio/app_core","app_core")
                       // sh "echo "APP CORE BUILT SUCCESS"" 
                        dnd_role_gen_img = docker.build("maxpaqzrio/role_generator","role_generator")
                       // sh "echo "$(tput setaf 2)ROLE_GEN BUILT SUCCESS"" 
                        dnd_weapon_gen_img = docker.build("maxpaqzrio/weapon_generator","weapon_generator")
                       // sh "echo "WEAPON GEN BUILT SUCCESS"" 
                        dnd_race_gen_img = docker.build("maxpaqzrio/race_generator","race_generator")
                       // sh "echo "RACE_GEN BUILT SUCCESS"" 
                        dnd_rating_gen_img = docker.build("maxpaqzrio/rating_generator","rating_generator")
                 //   }

                }
            }
        }
        stage("Deposit Images Stage"){
            steps{
                // sh "bash jenkins/shell-script/deposit_artifact.sh"
                script{
                    if(env.rollback == 'false'){
                        docker.withRegistry('https://registry.hub.docker.com','docker-hub-credentials'){dnd_app_core_img.push("${env.VERSION}")}
                        docker.withRegistry('https://registry.hub.docker.com','docker-hub-credentials'){dnd_role_gen_img.push("${env.VERSION}")}
                        docker.withRegistry('https://registry.hub.docker.com','docker-hub-credentials'){dnd_weapon_gen_img.push("${env.VERSION}")}
                        docker.withRegistry('https://registry.hub.docker.com','docker-hub-credentials'){dnd_race_gen_img.push("${env.VERSION}")}
                        docker.withRegistry('https://registry.hub.docker.com','docker-hub-credentials'){dnd_rating_gen_img.push("${env.VERSION}")}  
                        sh "echo"IMAGES SUCCESSFULLY PUSHED TO DOCKER"" 
                        }
                    }

                }
               


            }
          stage("Configure Docker Swarm"){
            steps{
            //    sh "bash jenkins/ansible-script/install-ansible.sh "
                sh "cd jenkins/ansible-script && /home/jenkins/.local/bin/jenkins/ansible-script/ansibible-playbook -i inventory playbook.yaml"
            }
            }
            // stage("Deploy application Stack"){
            // steps{
            //     sh "bash jenkins/deploy_stack.sh"
            // }
            // }
    }
}
